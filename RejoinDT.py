
import base64
exec(base64.b64decode('import os
import json
import time
import asyncio
import aiohttp
import logging
import hashlib
import uuid
import psutil
import sqlite3
import shutil
import subprocess
import requests
import base64
import platform
import sys
from datetime import datetime, timedelta
from colorama import init, Fore, Style
from typing import Dict, List, Optional, Set
from pathlib import Path
from tabulate import tabulate

# Initialize colorama and logging
init(autoreset=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('tool_log.txt', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Giữ cho Termux luôn hoạt động
try:
    subprocess.run(['termux-wake-lock'], check=True)
    print(Fore.GREEN + "Đã kích hoạt wake lock để giữ Termux hoạt động" + Style.RESET_ALL)
except:
    print(Fore.YELLOW + "Không thể kích hoạt wake lock, có thể Termux:API chưa được cài đặt" + Style.RESET_ALL)

class Config:
    SERVER_LINKS_FILE = "Private_Link.txt"
    ACCOUNTS_FILE = "Account.txt"
    PACKAGE_FILE = "Package.txt"  # New file to store package paths
    DISCORD_CONFIG_FILE = "discord_config.json"
    PRESENCE_WEBSOCKET_URL = "wss://presence.roblox.com/v1/presence"
    COOKIES_FILE = "cookie.json"
    MAX_RETRIES = 5
    RETRY_DELAY = 3
    STARTUP_DELAY = 45
    HEARTBEAT_INTERVAL = 30
    RECONNECT_DELAY = 5
    MAX_RECONNECT_ATTEMPTS = 3
    ERROR_279_RETRY_DELAY = 30  # Added delay for error 279
    LICENSE_FILE = "license.dat"  # File to store license key
    KEY_SERVER_URL = "https://prigaming.pythonanywhere.com///api/verify"  # Replace with your actual server URL

class LicenseManager:
    def __init__(self):
        self.license_file = Config.LICENSE_FILE
        self.key_server_url = Config.KEY_SERVER_URL
        self.hwid = self.get_hwid()
        
    def get_hwid(self):
        """Tạo ID phần cứng duy nhất cho thiết bị"""
        try:
            # Lấy thông tin phần cứng
            system_info = platform.uname()
            machine_id = ""
            
            # Thử lấy machine-id từ hệ thống
            try:
                if os.path.exists('/etc/machine-id'):
                    with open('/etc/machine-id', 'r') as f:
                        machine_id = f.read().strip()
                elif os.path.exists('/var/lib/dbus/machine-id'):
                    with open('/var/lib/dbus/machine-id', 'r') as f:
                        machine_id = f.read().strip()
            except:
                pass
            
            # Kết hợp thông tin
            combined = f"{system_info.system}{system_info.node}{system_info.machine}{machine_id}"
            
            # Tạo hash từ thông tin
            hwid = hashlib.md5(combined.encode()).hexdigest()
            return hwid
        except Exception as e:
            logger.error(f"Lỗi khi tạo HWID: {e}")
            # Fallback nếu có lỗi
            return hashlib.md5(str(uuid.getnode()).encode()).hexdigest()
    
    def save_license(self, key):
        """Lưu key vào file"""
        try:
            # Mã hóa key trước khi lưu
            encoded_key = base64.b64encode(key.encode()).decode()
            with open(self.license_file, 'w') as f:
                f.write(encoded_key)
            return True
        except Exception as e:
            logger.error(f"Lỗi khi lưu license: {e}")
            return False
    
    def load_license(self):
        """Đọc key từ file"""
        try:
            if os.path.exists(self.license_file):
                with open(self.license_file, 'r') as f:
                    encoded_key = f.read().strip()
                    # Giải mã key
                    return base64.b64decode(encoded_key).decode()
            return None
        except Exception as e:
            logger.error(f"Lỗi khi đọc license: {e}")
            return None
    
    async def verify_license(self, key=None):
        """Xác thực key với server"""
        try:
            if key is None:
                key = self.load_license()
                if not key:
                    return False, "Không tìm thấy key. Vui lòng nhập key."
            
            # Chuẩn bị dữ liệu gửi đến server
            data = {
                "key": key,
                "hwid": self.hwid
            }
            
            # Gửi request đến server
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(self.key_server_url, json=data, timeout=10) as response:
                        if response.status == 200:
                            try:
                                result = await response.json()
                                if result.get("valid", False):
                                    # Lưu key nếu hợp lệ
                                    self.save_license(key)
                                    expiry_date = result.get("expiry_date")
                                    return True, f"Key hợp lệ. Hết hạn: {expiry_date}"
                                else:
                                    return False, result.get("message", "Key không hợp lệ.")
                            except Exception as e:
                                logger.error(f"Lỗi khi xử lý JSON: {e}")
                                return False, f"Lỗi xử lý phản hồi: {e}"
                        else:
                            response_text = await response.text()
                            return False, f"Lỗi: Key không tồn tại vui lòng liên hệ admin"
                except aiohttp.ClientError as e:
                    logger.error(f"Lỗi kết nối: {e}")
                    # Nếu không kết nối được server, kiểm tra offline
                    return await self.verify_offline(key)
        except Exception as e:
            logger.error(f"Lỗi khi xác thực license: {e}")
            # Nếu có lỗi, thử xác thực offline
            return await self.verify_offline(key)

    
    async def verify_offline(self, key):
        """Xác thực key offline (khi không kết nối được server)"""
        try:
            saved_key = self.load_license()
            if saved_key and saved_key == key:
                # Kiểm tra xem key đã được xác thực trước đó chưa
                return True, "Key đã được xác thực trước đó. Đang sử dụng chế độ offline."
            return False, "Không thể xác thực key. Vui lòng kết nối internet và thử lại."
        except Exception as e:
            logger.error(f"Lỗi khi xác thực offline: {e}")
            return False, f"Lỗi xác thực: {e}"

def print_header():
    os.system('cls' if os.name == 'nt' else 'clear')  # Xóa màn hình console

    header = r"""        
  ___  _   _  ___  _  _  ___   _____ _   _  _   _  _ 
 |   \| | | |/ _ \| \| |/ __| |_   _| | | |/_\ | \| |
 | |) | |_| | (_) | .` | (_ |   | | | |_| / _ \| .` |
 |___/ \___/ \___/|_|\_|\___|   |_|  \___/_/ \_\_|\_|
                                                     
    """
    print(Fore.CYAN + header + Style.RESET_ALL)

# Gọi hàm để kiểm tra
print_header()

# Thêm hàm hiển thị màn hình đăng nhập key
async def show_license_screen():
    license_manager = LicenseManager()
    
    while True:
        print_header()
        print(Fore.CYAN + "\n╔═══════════ KÍCH HOẠT PHẦN MỀM ════════════╗" + Style.RESET_ALL)
        print(Fore.CYAN + "║                                           ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║  Vui lòng nhập key để kích hoạt tool      ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║                                           ║" + Style.RESET_ALL)
        print(Fore.CYAN + "╚═══════════════════════════════════════════╝\n" + Style.RESET_ALL)
        
        # Kiểm tra xem đã có key chưa
        saved_key = license_manager.load_license()
        if saved_key:
            print(Fore.YELLOW + f"Key đã lưu: {saved_key[:5]}...{saved_key[-5:]}" + Style.RESET_ALL)
            print(Fore.YELLOW + "Đang xác thực key..." + Style.RESET_ALL)
            valid, message = await license_manager.verify_license(saved_key)
            if valid:
                print(Fore.GREEN + f"✓ {message}" + Style.RESET_ALL)
                print(Fore.GREEN + "Đang chuyển đến menu chính..." + Style.RESET_ALL)
                await asyncio.sleep(2)
                return True
            else:
                print(Fore.RED + f"✗ {message}" + Style.RESET_ALL)
        
        # Yêu cầu nhập key mới
        key = input(Fore.CYAN + "► Nhập key của bạn (hoặc 'exit' để thoát): " + Style.RESET_ALL)
        if key.lower() == 'exit':
            return False
        
        if key:
            print(Fore.YELLOW + "Đang xác thực key..." + Style.RESET_ALL)
            valid, message = await license_manager.verify_license(key)
            if valid:
                print(Fore.GREEN + f"✓ {message}" + Style.RESET_ALL)
                print(Fore.GREEN + "Đang chuyển đến menu chính..." + Style.RESET_ALL)
                await asyncio.sleep(2)
                return True
            else:
                print(Fore.RED + f"✗ {message}" + Style.RESET_ALL)
                await asyncio.sleep(3)
        else:
            print(Fore.RED + "Vui lòng nhập key!" + Style.RESET_ALL)
            await asyncio.sleep(2)
def get_game_selection():
    menu = f"""
    {Fore.CYAN}╔═══════ CHỌN GAME ═══════╗
    ║{Fore.YELLOW} 1. Anime Vanguards      {Fore.CYAN}║
    ║{Fore.YELLOW} 2. Anime Last Stand     {Fore.CYAN}║  
    ║{Fore.YELLOW} 3. Anime Adventures     {Fore.CYAN}║
    ║{Fore.YELLOW} 4. Blox Fruit           {Fore.CYAN}║
    ║{Fore.YELLOW} 5. Nhập PlaceID khác    {Fore.CYAN}║
    ╚═════════════════════════╝{Style.RESET_ALL}
    """
    print(menu)
    
    choice = input(f"{Fore.CYAN}► Nhập lựa chọn của bạn (1-5): {Style.RESET_ALL}")
    
    if choice == "1":
        return "16146832113"
    elif choice == "2":
        return "12886143095" 
    elif choice == "3":
        return "8304191830"
    elif choice == "4":
        return "2753915549"
    elif choice == "5":
        custom_id = input(f"{Fore.CYAN}► Nhập PlaceID game của bạn: {Style.RESET_ALL}")
        return custom_id
    else:
        print(f"{Fore.RED}✖ Lựa chọn không hợp lệ!{Style.RESET_ALL}")
        return None
def format_server_link(input_link):
    if 'roblox.com' in input_link:
        return input_link
    elif input_link.isdigit():
        return f'roblox://placeID={input_link}'
    else:
        print(Fore.RED + "Liên kết không hợp lệ! Vui lòng nhập ID trò chơi hợp lệ." + Style.RESET_ALL)
        return None

def load_discord_config():
    if os.path.exists(Config.DISCORD_CONFIG_FILE):
        with open(Config.DISCORD_CONFIG_FILE, "r") as f:
            return json.load(f)
    return {"WEBHOOK_URL": ""}

def save_discord_config(webhook_url):
    config = {"WEBHOOK_URL": webhook_url}
    with open(Config.DISCORD_CONFIG_FILE, "w") as f:
        json.dump(config, f, indent=4)
    print(Fore.GREEN + "Đã lưu Discord Webhook URL." + Style.RESET_ALL)

# Tải cấu hình Discord khi khởi động
discord_config = load_discord_config()

class RobloxManager:
    def __init__(self):
        self._accounts = []
        self._server_links = []
        self._package_paths = {}  # Store package paths
        self._running = True
        self._status_cache = {}
        self._check_mode = "online"  # Default to online check mode
        self._error_states = {}  # Track error states per package
        self._offline_threshold = 15  # Số lần kiểm tra trước khi xác nhận offline
        self.connection_states = {}  # Add this line
    def download_file(self, url, destination, binary=False):
        try:
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                mode = 'wb' if binary else 'w'
                with open(destination, mode) as file:
                    if binary:
                        shutil.copyfileobj(response.raw, file)
                    else:
                        file.write(response.text)
                print(Fore.GREEN + f"{os.path.basename(destination)} downloaded successfully." + Style.RESET_ALL)
                return destination
            else:
                print(Fore.RED + f"Failed to download {os.path.basename(destination)}." + Style.RESET_ALL)
                return None
        except Exception as e:
            print(Fore.RED + f"Error downloading {os.path.basename(destination)}: {e}" + Style.RESET_ALL)
            return None

    def verify_cookie(self, cookie_value):
        try:
            print(Fore.YELLOW + "Đang xác thực cookie..." + Style.RESET_ALL)
            
            # Thiết lập headers với cookie
            headers = {
                'Cookie': f'.ROBLOSECURITY={cookie_value}',
                'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36',
                'Referer': 'https://www.roblox.com/',
                'Origin': 'https://www.roblox.com',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive'
            }

            # Tạo độ trễ nhỏ để mô phỏng mẫu yêu cầu tự nhiên hơn
            time.sleep(1)

            # Thực hiện yêu cầu GET đến endpoint xác thực
            response = requests.get('https://users.roblox.com/v1/users/authenticated', headers=headers)
            
            print(Fore.YELLOW + f"Kết quả xác thực: HTTP {response.status_code}" + Style.RESET_ALL)
            
            if response.status_code == 200:
                # Người dùng đã được xác thực
                user_data = response.json()
                username = user_data.get('name', 'Unknown')
                user_id = user_data.get('id', 'Unknown')
                print(Fore.GREEN + f"Cookie hợp lệ! Đã xác thực người dùng: {username} (ID: {user_id})" + Style.RESET_ALL)
                return True
            elif response.status_code == 401:
                # Không được phép, cookie không hợp lệ
                print(Fore.RED + "Cookie không hợp lệ. Người dùng không được xác thực." + Style.RESET_ALL)
                return False
            else:
                # Xảy ra lỗi khác
                print(Fore.RED + f"Lỗi xác thực cookie: {response.status_code}" + Style.RESET_ALL)
                try:
                    error_data = response.json()
                    print(Fore.RED + f"Chi tiết lỗi: {json.dumps(error_data, indent=2)}" + Style.RESET_ALL)
                except:
                    print(Fore.RED + f"Không thể phân tích phản hồi lỗi: {response.text[:100]}" + Style.RESET_ALL)
                return False

        except Exception as e:
            print(Fore.RED + f"Lỗi khi xác thực cookie: {e}" + Style.RESET_ALL)
            return False

    def replace_cookie_value_in_db(self, db_path, new_cookie_value):
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            # Đầu tiên, kiểm tra xem cookie .ROBLOSECURITY có tồn tại không
            cursor.execute("""
                SELECT COUNT(*) FROM cookies WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
            """)
            cookie_exists = cursor.fetchone()[0]

            if cookie_exists:
                # Cập nhật cookie hiện có
                cursor.execute("""
                    UPDATE cookies
                    SET value = ?, last_access_utc = ?, expires_utc = ?
                    WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
                """, (new_cookie_value, int(time.time() * 1000000), 99999999999999999))
            else:
                # Chèn cookie nếu nó không tồn tại
                cursor.execute("""
                    INSERT INTO cookies (creation_utc, host_key, name, value, path, expires_utc, is_secure, is_httponly, last_access_utc)
                    VALUES (?, '.roblox.com', '.ROBLOSECURITY', ?, '/', 99999999999999999, 0, 0, ?)
                """, (int(time.time() * 1000000), new_cookie_value, int(time.time() * 1000000)))

            conn.commit()
            conn.close()
            print(Fore.GREEN + "Cookie value replaced successfully in the database!" + Style.RESET_ALL)

        except sqlite3.OperationalError as e:
            print(Fore.RED + f"Database error during cookie replacement: {e}" + Style.RESET_ALL)
        except Exception as e:
            print(Fore.RED + f"Error replacing cookie value in database: {e}" + Style.RESET_ALL)

    
    async def auto_login_via_cookie(self):
        """Chức năng đăng nhập bằng Cookie vào package Roblox với hiển thị username"""
        print_header()
        
        # Remove debug prints about cookie file path
        cookie_file_path = os.path.join(os.getcwd(), "cookie.txt")
        
        print(Fore.CYAN + "\n╔═══════════ ĐĂNG NHẬP BẰNG COOKIE ═════════════╗" + Style.RESET_ALL)
        print(Fore.CYAN + "║                                               ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║  Tính năng này cho phép đăng nhập vào Roblox  ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║  bằng cookie trên nhiều package khác nhau     ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║                                               ║" + Style.RESET_ALL)
        print(Fore.CYAN + "╚═══════════════════════════════════════════════╝\n" + Style.RESET_ALL)
        
        # Kiểm tra và tạo thư mục tạm nếu chưa tồn tại
        temp_dir = os.path.join(os.getcwd(), "temp")
        os.makedirs(temp_dir, exist_ok=True)
        
        # Đường dẫn đến các file cần thiết
        db_url = "https://github.com/shirooscripts/auto-rj/raw/main/Cookies"
        appstorage_url = "https://raw.githubusercontent.com/Kiet010402/nhap/refs/heads/main/appStorage.json"
        downloaded_db_path = os.path.join(temp_dir, "Cookies.db")
        downloaded_appstorage_path = os.path.join(temp_dir, "appStorage.json")
        
        # Tải xuống các file cần thiết
        print(Fore.YELLOW + "Đang tải xuống các file cần thiết..." + Style.RESET_ALL)
        try:
            # Tải file Cookies.db
            response = requests.get(db_url, stream=True)
            if response.status_code == 200:
                with open(downloaded_db_path, 'wb') as file:
                    shutil.copyfileobj(response.raw, file)
                print(Fore.GREEN + "Đã tải xuống Cookies.db thành công" + Style.RESET_ALL)
            else:
                print(Fore.RED + "Không thể tải xuống Cookies.db" + Style.RESET_ALL)
                await asyncio.sleep(2)
                return
            
            # Tải file appStorage.json
            response = requests.get(appstorage_url)
            if response.status_code == 200:
                with open(downloaded_appstorage_path, 'w') as file:
                    file.write(response.text)
                print(Fore.GREEN + "Đã tải xuống appStorage.json thành công" + Style.RESET_ALL)
            else:
                print(Fore.RED + "Không thể tải xuống appStorage.json" + Style.RESET_ALL)
                await asyncio.sleep(2)
                return
        except Exception as e:
            print(Fore.RED + f"Lỗi khi tải xuống file: {e}" + Style.RESET_ALL)
            await asyncio.sleep(2)
            return
        
        # Xử lý cookie
        cookies = []
        
        # Kiểm tra xem file cookie.txt đã tồn tại chưa
        if not os.path.exists(cookie_file_path):
            print(Fore.YELLOW + "Không tìm thấy file cookie.txt" + Style.RESET_ALL)
            cookie_choice = input(Fore.CYAN + "Bạn muốn nhập cookie ngay bây giờ? (y/n): " + Style.RESET_ALL).lower()
            
            if cookie_choice == 'y':
                print(Fore.CYAN + "\n╔═══════ HƯỚNG DẪN NHẬP COOKIE ════════╗" + Style.RESET_ALL)
                print(Fore.CYAN + "║                                       ║" + Style.RESET_ALL)
                print(Fore.CYAN + "║  1. Mỗi cookie trên một dòng          ║" + Style.RESET_ALL)
                print(Fore.CYAN + "║  2. Chỉ nhập giá trị cookie, không    ║" + Style.RESET_ALL)
                print(Fore.CYAN + "║     cần thêm .ROBLOSECURITY=          ║" + Style.RESET_ALL)
                print(Fore.CYAN + "║  3. Nhập 'done' khi hoàn tất          ║" + Style.RESET_ALL)
                print(Fore.CYAN + "║                                       ║" + Style.RESET_ALL)
                print(Fore.CYAN + "╚═══════════════════════════════════════╝\n" + Style.RESET_ALL)
                
                print(Fore.YELLOW + "Nhập cookie của bạn (nhập 'done' khi hoàn tất):" + Style.RESET_ALL)
                while True:
                    cookie_input = input(Fore.CYAN + "► " + Style.RESET_ALL)
                    if cookie_input.lower() == 'done':
                        break
                    if cookie_input.strip():
                        # Loại bỏ .ROBLOSECURITY= nếu có
                        if '.ROBLOSECURITY=' in cookie_input:
                            cookie_input = cookie_input.split('.ROBLOSECURITY=')[1]
                        cookies.append(cookie_input.strip())
                
                # Lưu cookie vào file
                with open(cookie_file_path, 'w') as file:
                    for cookie in cookies:
                        file.write(cookie + '\n')
                print(Fore.GREEN + f"Đã lưu {len(cookies)} cookie vào file cookie.txt" + Style.RESET_ALL)
            else:
                print(Fore.YELLOW + "Vui lòng tạo file cookie.txt với mỗi cookie trên một dòng và thử lại sau" + Style.RESET_ALL)
                await asyncio.sleep(2)
                return
        else:
            # Đọc cookie từ file
            with open(cookie_file_path, 'r') as file:
                cookies = [line.strip() for line in file.readlines() if line.strip()]
            print(Fore.GREEN + f"Đã đọc {len(cookies)} cookie từ file cookie.txt" + Style.RESET_ALL)
        if not cookies:
            print(Fore.RED + "Không tìm thấy cookie nào. Vui lòng kiểm tra lại file cookie.txt" + Style.RESET_ALL)
            await asyncio.sleep(2)
            return
        
        # Lấy username cho mỗi cookie
        print(Fore.YELLOW + "Đang lấy thông tin tài khoản từ cookie..." + Style.RESET_ALL)
        valid_cookies = []
        valid_usernames = []
        valid_user_ids = []
        invalid_cookies = []  # Danh sách lưu các cookie không hợp lệ
        
        cookie_info_table = []
        
        for i, cookie in enumerate(cookies):
            print(Fore.YELLOW + f"Đang kiểm tra cookie {i+1}/{len(cookies)}..." + Style.RESET_ALL)
            
            # Thiết lập headers với cookie
            headers = {
                'Cookie': f'.ROBLOSECURITY={cookie}',
                'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36',
            }
            
            try:
                # Thực hiện yêu cầu GET đến endpoint xác thực
                response = requests.get('https://users.roblox.com/v1/users/authenticated', headers=headers)
                
                if response.status_code == 200:
                    user_data = response.json()
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data.get('id', 'Unknown')
                    
                    valid_cookies.append(cookie)
                    valid_usernames.append(username)
                    valid_user_ids.append(user_id)
                    
                    cookie_info_table.append([i+1, username, user_id, "Hợp lệ"])
                    print(Fore.GREEN + f"  ✓ Cookie hợp lệ: {username} (ID: {user_id})" + Style.RESET_ALL)
                else:
                    cookie_info_table.append([i+1, "N/A", "N/A", "Không hợp lệ"])
                    print(Fore.RED + f"Cookie {i+1} không hợp lệ" + Style.RESET_ALL)
                    invalid_cookies.append(cookie)  # Thêm cookie không hợp lệ vào danh sách
            except Exception as e:
                cookie_info_table.append([i+1, "N/A", "N/A", f"Lỗi: {str(e)[:30]}..."])
                print(Fore.RED + f"Lỗi khi kiểm tra cookie {i+1}: {e}" + Style.RESET_ALL)
                invalid_cookies.append(cookie)  # Thêm cookie lỗi vào danh sách
        
        # Xóa các cookie không hợp lệ khỏi file cookie.txt
        if invalid_cookies:
            print(Fore.YELLOW + f"Phát hiện {len(invalid_cookies)} cookie không hợp lệ hoặc lỗi. Đang xóa..." + Style.RESET_ALL)
            
            # Lưu lại chỉ các cookie hợp lệ
            with open(cookie_file_path, 'w') as file:
                for cookie in valid_cookies:
                    file.write(cookie + '\n')
            
            print(Fore.GREEN + f"Đã xóa {len(invalid_cookies)} cookie không hợp lệ. Còn lại {len(valid_cookies)} cookie hợp lệ." + Style.RESET_ALL)
        
        if not valid_cookies:
            print(Fore.RED + "Không có cookie nào hợp lệ. Vui lòng kiểm tra lại file cookie.txt" + Style.RESET_ALL)
            await asyncio.sleep(2)
            return
        
        # Hiển thị bảng thông tin cookie
        print("\n" + Fore.CYAN + "DANH SÁCH COOKIE" + Style.RESET_ALL)
        print(tabulate(cookie_info_table, headers=["STT", "Username", "User ID", "Trạng thái"], tablefmt="fancy_grid"))
        print(Fore.GREEN + f"Đã tìm thấy {len(valid_cookies)}/{len(cookies)} cookie hợp lệ\n" + Style.RESET_ALL)
        
        # Lấy danh sách package Roblox
        print(Fore.YELLOW + "Đang tìm kiếm package Roblox..." + Style.RESET_ALL)
        packages = self.get_roblox_packages()
        
        if not packages:
            print(Fore.RED + "Không tìm thấy package Roblox nào trên thiết bị" + Style.RESET_ALL)
            await asyncio.sleep(2)
            return
        
        # Hiển thị danh sách package
        package_table = []
        for i, package in enumerate(packages, 1):
            package_table.append([i, package])
        
        print("\n" + Fore.CYAN + "DANH SÁCH PACKAGE ROBLOX" + Style.RESET_ALL)
        print(tabulate(package_table, headers=["STT", "Package Name"], tablefmt="fancy_grid"))
        print(Fore.GREEN + f"Đã tìm thấy {len(packages)} package Roblox\n" + Style.RESET_ALL)
        
        # Cho phép người dùng chọn package để đăng nhập
        package_choice = input(Fore.YELLOW + "Nhập số thứ tự các package muốn đăng nhập (cách nhau bởi dấu phẩy) hoặc 'all' để chọn tất cả: " + Style.RESET_ALL)
        
        selected_packages = []
        if package_choice.lower() == 'all':
            selected_packages = packages
            print(Fore.GREEN + "Đã chọn tất cả package" + Style.RESET_ALL)
        else:
            try:
                selected_indices = [int(idx.strip()) - 1 for idx in package_choice.split(',') if idx.strip()]
                for idx in selected_indices:
                    if 0 <= idx < len(packages):
                        selected_packages.append(packages[idx])
                
                if not selected_packages:
                    print(Fore.YELLOW + "Không có package nào được chọn, sử dụng tất cả package" + Style.RESET_ALL)
                    selected_packages = packages
                else:
                    print(Fore.GREEN + f"Đã chọn {len(selected_packages)} package" + Style.RESET_ALL)
            except ValueError:
                print(Fore.YELLOW + "Lựa chọn không hợp lệ, sử dụng tất cả package" + Style.RESET_ALL)
                selected_packages = packages
        
        # Cho phép người dùng chọn cookie cho từng package
        package_cookie_map = {}
        
        print(Fore.CYAN + "\n=== CHỌN COOKIE CHO TỪNG PACKAGE ===" + Style.RESET_ALL)
        
        for package in selected_packages:
            print(Fore.YELLOW + f"\nChọn cookie cho package {package}:" + Style.RESET_ALL)
            
            # Hiển thị danh sách cookie hợp lệ
            cookie_choice_table = []
            for i, (username, user_id) in enumerate(zip(valid_usernames, valid_user_ids), 1):
                cookie_choice_table.append([i, username, user_id])
            
            print(tabulate(cookie_choice_table, headers=["STT", "Username", "User ID"], tablefmt="simple"))
            
            cookie_idx = input(Fore.CYAN + f"Nhập số thứ tự cookie (1-{len(valid_cookies)}): " + Style.RESET_ALL)
            
            try:
                idx = int(cookie_idx) - 1
                if 0 <= idx < len(valid_cookies):
                    package_cookie_map[package] = valid_cookies[idx]
                    print(Fore.GREEN + f"Đã chọn cookie của {valid_usernames[idx]} (ID: {valid_user_ids[idx]}) cho {package}" + Style.RESET_ALL)
                else:
                    # Nếu chọn không hợp lệ, sử dụng cookie đầu tiên
                    package_cookie_map[package] = valid_cookies[0]
                    print(Fore.YELLOW + f"Lựa chọn không hợp lệ, sử dụng cookie của {valid_usernames[0]} cho {package}" + Style.RESET_ALL)
            except ValueError:
                # Nếu nhập không phải số, sử dụng cookie đầu tiên
                package_cookie_map[package] = valid_cookies[0]
                print(Fore.YELLOW + f"Lựa chọn không hợp lệ, sử dụng cookie của {valid_usernames[0]} cho {package}" + Style.RESET_ALL)
        
        # Tiến hành đăng nhập
        print(Fore.YELLOW + "\nBắt đầu quá trình đăng nhập..." + Style.RESET_ALL)
        
        # Tạo bảng để hiển thị kết quả
        results_table = []
        
        for package_name in selected_packages:
            cookie = package_cookie_map.get(package_name)
            if not cookie:
                results_table.append([package_name, "Bỏ qua", "Không có cookie được chọn"])
                continue
            
            # Tìm username tương ứng với cookie
            cookie_idx = valid_cookies.index(cookie)
            username = valid_usernames[cookie_idx]
            user_id = valid_user_ids[cookie_idx]
            
            # Hiển thị tiến trình
            print(Fore.YELLOW + f"Đang xử lý {package_name} với tài khoản {username}..." + Style.RESET_ALL)
            
            try:
                # Đường dẫn đến thư mục đích
                destination_db_dir = f"/data/data/{package_name}/app_webview/Default/"
                destination_appstorage_dir = f"/data/data/{package_name}/files/appData/LocalStorage/"
                
                # Đảm bảo thư mục tồn tại
                os.makedirs(destination_db_dir, exist_ok=True)
                os.makedirs(destination_appstorage_dir, exist_ok=True)
                
                # Sao chép Cookies.db đã tải xuống vào đích
                print(Fore.YELLOW + f"Đang sao chép Cookies.db..." + Style.RESET_ALL)
                destination_db_path = os.path.join(destination_db_dir, "Cookies")
                shutil.copyfile(downloaded_db_path, destination_db_path)
                
                # Tiêm appStorage.json
                print(Fore.YELLOW + f"Đang sao chép appStorage.json..." + Style.RESET_ALL)
                destination_appstorage_path = os.path.join(destination_appstorage_dir, "appStorage.json")
                shutil.copyfile(downloaded_appstorage_path, destination_appstorage_path)
                
                # Thay thế giá trị cookie trong cơ sở dữ liệu
                print(Fore.YELLOW + f"Đang đăng nhập cookie vào cơ sở dữ liệu..." + Style.RESET_ALL)
                self.replace_cookie_value_in_db(destination_db_path, cookie)
                
                # Xác minh cookie sau khi tiêm
                print(Fore.YELLOW + f"Đang xác minh cookie sau khi đăng nhập..." + Style.RESET_ALL)
                if self.verify_cookie(cookie):
                    print(Fore.GREEN + f"Cookie vẫn hợp lệ sau khi đăng nhập" + Style.RESET_ALL)
                    
                    # Thêm mới: Mở package để xác nhận đăng nhập thành công
                    print(Fore.YELLOW + f"Đang mở {package_name} để xác nhận đăng nhập..." + Style.RESET_ALL)
                    try:
                        # Mở ứng dụng Roblox
                        subprocess.run([
                            'am', 'start', '-n',
                            f'{package_name}/com.roblox.client.startup.ActivitySplash'
                        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                        
                        # Đợi ứng dụng khởi động
                        print(Fore.YELLOW + "Đợi ứng dụng khởi động (10 giây)..." + Style.RESET_ALL)
                        await asyncio.sleep(10)
                        
                        # Kiểm tra xem ứng dụng có đang chạy không
                        is_running, _ = self.is_package_running(package_name)
                        if is_running:
                            print(Fore.GREEN + f"Xác nhận {package_name} đã khởi động thành công" + Style.RESET_ALL)
                        else:
                            print(Fore.YELLOW + f"Không thể xác nhận {package_name} đã khởi động" + Style.RESET_ALL)
                        
                        # Đóng ứng dụng sau khi xác nhận
                        print(Fore.YELLOW + f"Đang đóng {package_name}..." + Style.RESET_ALL)
                        self.kill_specific_roblox_process(package_name)
                        await asyncio.sleep(2)
                        
                        print(Fore.GREEN + f"Đã đóng {package_name}" + Style.RESET_ALL)
                        results_table.append([package_name, "Thành công", f"{username} (Đã xác nhận)"])
                    except Exception as e:
                        print(Fore.RED + f"Lỗi khi mở/đóng ứng dụng: {e}" + Style.RESET_ALL)
                        results_table.append([package_name, "Thành công", f"{username} (Không thể xác nhận)"])
                else:
                    print(Fore.RED + f"Cookie không hợp lệ sau khi đăng nhập" + Style.RESET_ALL)
                    results_table.append([package_name, "Cảnh báo", f"{username} - Cookie không hợp lệ sau khi đăng nhập"])
                    
                    # Đánh dấu cookie này là không hợp lệ để xóa sau
                    if cookie not in invalid_cookies:
                        invalid_cookies.append(cookie)
            
            except Exception as e:
                print(Fore.RED + f"Lỗi khi đăng nhập cookie: {e}" + Style.RESET_ALL)
                results_table.append([package_name, "Thất bại", f"Lỗi: {str(e)[:30]}..."])
        
        # Xóa thêm các cookie không hợp lệ sau khi tiêm
        if invalid_cookies:
            # Lọc ra các cookie còn hợp lệ (không nằm trong danh sách invalid_cookies)
            remaining_valid_cookies = [c for c in valid_cookies if c not in invalid_cookies]
            
            # Cập nhật lại file cookie.txt
            with open(cookie_file_path, 'w') as file:
                for cookie in remaining_valid_cookies:
                    file.write(cookie + '\n')
            
            print(Fore.YELLOW + f"Đã xóa thêm {len(invalid_cookies) - (len(cookies) - len(valid_cookies))} cookie không hợp lệ sau khi tiêm." + Style.RESET_ALL)
            print(Fore.GREEN + f"Còn lại {len(remaining_valid_cookies)} cookie hợp lệ trong file." + Style.RESET_ALL)
        
        # Hiển thị bảng kết quả
        print_header()
        print(Fore.WHITE + "\n                  KẾT QUẢ ĐĂNG NHẬP                   " + Style.RESET_ALL)
        print(tabulate(results_table, headers=["Package", "Trạng thái", "Tài khoản"], tablefmt="fancy_grid"))
        
        # Hướng dẫn tiếp theo
        print(Fore.GREEN + "Quá trình đăng nhập đã hoàn tất!" + Style.RESET_ALL)
        print(Fore.YELLOW + "Lưu ý: Bạn cần khởi động lại ứng dụng Roblox để áp dụng thay đổi" + Style.RESET_ALL)
        
        # Xóa file tạm nếu cần
        try:
            shutil.rmtree(temp_dir)
            print(Fore.GREEN + "Đã dọn dẹp file tạm" + Style.RESET_ALL)
        except Exception as e:
            print(Fore.YELLOW + f"Không thể xóa file tạm: {e}" + Style.RESET_ALL)
        
        # Đợi người dùng xem kết quả
        input(Fore.CYAN + "\nNhấn Enter để quay lại menu chính..." + Style.RESET_ALL)

    
    async def extract_cookies_from_packages(self):
        """Chức năng lấy cookie từ các package Roblox đã đăng nhập"""
        print_header()
        print(Fore.CYAN + "\n╔═══════════ LẤY COOKIE TỪ PACKAGE ═════════════╗" + Style.RESET_ALL)
        print(Fore.CYAN + "║                                                ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║  Tính năng này cho phép lấy cookie Roblox từ   ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║  các package đã đăng nhập                      ║" + Style.RESET_ALL)
        print(Fore.CYAN + "║                                                ║" + Style.RESET_ALL)
        print(Fore.CYAN + "╚════════════════════════════════════════════════╝\n" + Style.RESET_ALL)
        
        # Tìm các package Roblox
        print(Fore.YELLOW + "Đang tìm kiếm package Roblox..." + Style.RESET_ALL)
        packages = self.get_roblox_packages()
        
        if not packages:
            print(Fore.RED + "Không tìm thấy package Roblox nào trên thiết bị" + Style.RESET_ALL)
            await asyncio.sleep(2)
            return
        
        # Hiển thị danh sách package
        package_table = []
        for i, package in enumerate(packages, 1):
            package_table.append([i, package])
        
        print("\n" + Fore.CYAN + "DANH SÁCH PACKAGE ROBLOX" + Style.RESET_ALL)
        print(tabulate(package_table, headers=["STT", "Package Name"], tablefmt="fancy_grid"))
        print(Fore.GREEN + f"Đã tìm thấy {len(packages)} package Roblox\n" + Style.RESET_ALL)
        
        # Cảnh báo về cookie
        print(Fore.YELLOW + "⚠️ LƯU Ý QUAN TRỌNG ⚠️" + Style.RESET_ALL)
        print(Fore.YELLOW + "- Cookie Roblox có thể bị vô hiệu hóa khi đăng xuất" + Style.RESET_ALL)
        print(Fore.YELLOW + "- Để có cookie hợp lệ, KHÔNG đăng xuất sau khi đăng nhập" + Style.RESET_ALL)
        print(Fore.YELLOW + "- Chỉ lấy cookie từ package đang đăng nhập và chưa đăng xuất\n" + Style.RESET_ALL)
        
        # Cho phép người dùng chọn package để lấy cookie
        package_choice = input(Fore.YELLOW + "Nhập số thứ tự các package muốn lấy cookie (cách nhau bởi dấu phẩy) hoặc 'all' để chọn tất cả: " + Style.RESET_ALL)
        
        selected_packages = []
        if package_choice.lower() == 'all':
            selected_packages = packages
            print(Fore.GREEN + "Đã chọn tất cả package" + Style.RESET_ALL)
        else:
            try:
                selected_indices = [int(idx.strip()) - 1 for idx in package_choice.split(',') if idx.strip()]
                for idx in selected_indices:
                    if 0 <= idx < len(packages):
                        selected_packages.append(packages[idx])
                
                if not selected_packages:
                    print(Fore.YELLOW + "Không có package nào được chọn, sử dụng tất cả package" + Style.RESET_ALL)
                    selected_packages = packages
                else:
                    print(Fore.GREEN + f"Đã chọn {len(selected_packages)} package" + Style.RESET_ALL)
            except ValueError:
                print(Fore.YELLOW + "Lựa chọn không hợp lệ, sử dụng tất cả package" + Style.RESET_ALL)
                selected_packages = packages
        
        # Tạo thư mục để lưu cookie nếu chưa tồn tại
        cookies_dir = os.path.join(os.getcwd(), "extracted_cookies")
        os.makedirs(cookies_dir, exist_ok=True)
        
        # Tạo file để lưu tất cả cookie
        all_cookies_file = os.path.join(cookies_dir, "all_cookies.txt")
        
        # Bảng kết quả
        results_table = []
        extracted_cookies = []
        
        # Xử lý từng package
        for package in selected_packages:
            try:
                # Đường dẫn đến file Cookies trong package
                cookies_db_path = f"/data/data/{package}/app_webview/Default/Cookies"
                
                if not os.path.exists(cookies_db_path):
                    results_table.append([package, "Thất bại", "File Cookies không tồn tại"])
                    continue
                
                # Tạo bản sao tạm thời của file Cookies để tránh lỗi khi đọc
                temp_db_path = os.path.join(cookies_dir, f"{package}_cookies.db")
                shutil.copy2(cookies_db_path, temp_db_path)
                
                # Kết nối đến database
                conn = sqlite3.connect(temp_db_path)
                cursor = conn.cursor()
                
                # Truy vấn cookie .ROBLOSECURITY
                cursor.execute("""
                    SELECT value FROM cookies 
                    WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
                """)
                
                result = cursor.fetchone()
                conn.close()
                
                # Xóa file tạm
                os.remove(temp_db_path)
                
                if result:
                    cookie_value = result[0]
                    
                    # In cookie để debug (chỉ hiển thị một phần)
                    print(Fore.YELLOW + f"Cookie từ {package}: {cookie_value[:15]}...{cookie_value[-15:]}" + Style.RESET_ALL)
                    
                    # Kiểm tra tính hợp lệ của cookie
                    print(Fore.YELLOW + f"Đang xác thực cookie từ {package}..." + Style.RESET_ALL)
                    if self.verify_cookie(cookie_value):
                        # Lấy thông tin người dùng từ cookie
                        headers = {
                            'Cookie': f'.ROBLOSECURITY={cookie_value}',
                            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36',
                        }
                        
                        response = requests.get('https://users.roblox.com/v1/users/authenticated', headers=headers)
                        
                        if response.status_code == 200:
                            user_data = response.json()
                            username = user_data.get('name', 'Unknown')
                            user_id = user_data.get('id', 'Unknown')
                            
                            # Lưu cookie vào file riêng cho package
                            package_cookie_file = os.path.join(cookies_dir, f"{package}_{username}_cookie.txt")
                            with open(package_cookie_file, 'w') as f:
                                f.write(cookie_value)
                            
                            # Thêm vào danh sách tất cả cookie
                            extracted_cookies.append((cookie_value, username, user_id, package))
                            
                            results_table.append([package, "Thành công ✓", f"{username} (ID: {user_id})"])
                        else:
                            error_text = f"API trả về lỗi: {response.status_code}"
                            try:
                                error_data = response.json()
                                if 'errors' in error_data and error_data['errors']:
                                    error_text += f" - {error_data['errors'][0].get('message', '')}"
                            except:
                                pass
                            results_table.append([package, "Thất bại ✗", error_text])
                    else:
                        results_table.append([package, "Thất bại ✗", "Cookie không hợp lệ (Xác thực)"])
                else:
                    results_table.append([package, "Thất bại ✗", "Không tìm thấy cookie"])
                    
            except Exception as e:
                results_table.append([package, "Lỗi ⚠️", str(e)[:30] + "..."])
                print(Fore.RED + f"Lỗi khi xử lý {package}: {e}" + Style.RESET_ALL)
        
        # Lưu tất cả cookie vào một file
        if extracted_cookies:
            with open(all_cookies_file, 'w') as f:
                for cookie, username, user_id, package in extracted_cookies:
                    f.write(f"# {username} (ID: {user_id}) - Package: {package}\n")
                    f.write(f"{cookie}\n\n")
        
        # Hiển thị kết quả
        print_header()
        print(Fore.WHITE + "\n                  KẾT QUẢ LẤY COOKIE                   " + Style.RESET_ALL)
        print(tabulate(results_table, headers=["Package", "Trạng thái", "Thông tin"], tablefmt="fancy_grid"))
        
        if extracted_cookies:
            print(Fore.GREEN + f"\nĐã lấy thành công {len(extracted_cookies)} cookie!" + Style.RESET_ALL)
            print(Fore.YELLOW + f"Cookie đã được lưu vào thư mục: {cookies_dir}" + Style.RESET_ALL)
            print(Fore.YELLOW + f"Tất cả cookie đã được lưu vào: {all_cookies_file}" + Style.RESET_ALL)
            
            # Thêm hướng dẫn sử dụng cookie
            print(Fore.CYAN + "\n=== HƯỚNG DẪN SỬ DỤNG COOKIE ===" + Style.RESET_ALL)
            print(Fore.CYAN + "1. KHÔNG đăng xuất khỏi Roblox sau khi lấy cookie" + Style.RESET_ALL)
            print(Fore.CYAN + "2. Sử dụng cookie ngay sau khi lấy" + Style.RESET_ALL)
            print(Fore.CYAN + "3. Nếu cookie không hoạt động, hãy đăng nhập lại và lấy cookie mới" + Style.RESET_ALL)
        else:
            print(Fore.RED + "\nKhông lấy được cookie nào!" + Style.RESET_ALL)
        
        # Đợi người dùng xem kết quả
        input(Fore.CYAN + "\nNhấn Enter để quay lại menu chính..." + Style.RESET_ALL)



    def save_package_paths(self, paths):
        with open(Config.PACKAGE_FILE, "w") as f:
            for package_name, path in paths.items():
                f.write(f"{package_name},{path}\n")

    def load_package_paths(self):
        paths = {}
        if os.path.exists(Config.PACKAGE_FILE):
            with open(Config.PACKAGE_FILE, 'r') as f:
                for line in f:
                    package_name, path = line.strip().split(',', 1)
                    paths[package_name] = path
        return paths
    def _cleanup_cache(self):
        """Xóa tất cả cache không phân biệt kích thước"""
        try:
            # Lưu thông tin trước khi xóa
            cache_size_before = len(self._status_cache)
            cache_memory_before = sum(len(str(item)) for item in self._status_cache.items())
            current_time = datetime.now()

            # Xóa toàn bộ cache
            self._status_cache.clear()

            # Tính toán thông tin sau khi xóa
            cache_size_after = 0  # Vì đã xóa hết
            cache_memory_after = 0  # Vì đã xóa hết
            items_removed = cache_size_before
            memory_freed = cache_memory_before

            # Lưu thông tin để sử dụng trong báo cáo
            self._last_cleanup_stats = {
                "items_removed": items_removed,
                "memory_freed": memory_freed,
                "time": current_time
            }

            # Format dung lượng để dễ đọc
            def format_size(size_bytes):
                if size_bytes < 1024:  # < 1KB
                    return f"{size_bytes}B"
                elif size_bytes < 1024 * 1024:  # < 1MB
                    return f"{size_bytes/1024:.2f}KB"
                else:  # >= 1MB
                    return f"{size_bytes/(1024*1024):.2f}MB"

            # In thông báo chi tiết
            print(f"{Fore.GREEN}Đã xóa toàn bộ cache:")
            print(f"- Số mục đã xóa: {items_removed}")
            print(f"- Dung lượng đã giải phóng: {format_size(memory_freed)}")
            print(f"- Cache hiện tại: {cache_size_after} mục ({format_size(cache_memory_after)}){Style.RESET_ALL}")

            # Lưu thời gian dọn dẹp cache
            self._last_cache_cleanup = current_time

        except Exception as e:
            logger.error(f"Lỗi khi dọn dẹp cache: {e}")
            print(f"{Fore.RED}Lỗi khi dọn dẹp cache: {e}{Style.RESET_ALL}")
    def load_accounts(self):
        accounts = []
        if os.path.exists(Config.ACCOUNTS_FILE):
            with open(Config.ACCOUNTS_FILE, 'r') as f:
                for line in f:
                    package, user_id = line.strip().split(',', 1)
                    accounts.append((package, user_id))
        return accounts

    def save_accounts(self, accounts):
        with open(Config.ACCOUNTS_FILE, "w") as f:
            for package, user_id in accounts:
                f.write(f"{package},{user_id}\n")

    def load_server_links(self):
        links = []
        if os.path.exists(Config.SERVER_LINKS_FILE):
            with open(Config.SERVER_LINKS_FILE, 'r') as f:
                for line in f:
                    package, link = line.strip().split(',', 1)
                    links.append((package, link))
        return links

    def save_server_links(self, server_links):
        with open(Config.SERVER_LINKS_FILE, "w") as f:
            for package, link in server_links:
                f.write(f"{package},{link}\n")

    def get_roblox_packages(self):
        packages = []
        result = subprocess.run("pm list packages | grep 'roblox'", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            packages = [line.split(":")[1] for line in result.stdout.splitlines()]
        return packages

    async def get_user_id(self, username):
        url = "https://users.roblox.com/v1/usernames/users"
        payload = {
            "usernames": [username],
            "excludeBannedUsers": True
        }
        headers = {"Content-Type": "application/json"}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                data = await response.json()
                if 'data' in data and len(data['data']) > 0:
                    return str(data['data'][0]['id'])
        return None

    def get_username(self, user_id):
        try:
            url = f"https://users.roblox.com/v1/users/{user_id}"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            return data.get("name", "Không rõ")
        except Exception as e:
            logger.error(f"Error getting username for {user_id}: {e}")
            return None

    def kill_specific_roblox_process(self, package_name):
        try:
            subprocess.run(['am', 'force-stop', package_name],
                         stdout=subprocess.DEVNULL,
                         stderr=subprocess.DEVNULL)
            logger.info(f"Killed Roblox process for {package_name}")
            time.sleep(1)
        except Exception as e:
            logger.error(f"Failed to kill process for {package_name}: {e}")

    def is_package_installed(self, package_name: str) -> bool:
        try:
            cmd = f"pm list packages | grep {package_name}"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return bool(result.stdout.strip())
        except Exception as e:
            logger.error(f"Error checking package installation: {e}")
            return False

    def check_error_code(self, package_name: str) -> Optional[str]:
        try:
            # Check both package directory and logcat for error code
            log_paths = [
                f"/data/data/{package_name}/files/logs/log.txt",
                f"/data/data/{package_name}/files/ClientSettings/LOG"
            ]
            
            # First check log files
            for log_path in log_paths:
                if os.path.exists(log_path):
                    with open(log_path, 'r', encoding='utf-8', errors='ignore') as f:
                        # Read last 50 lines to check for recent errors
                        lines = f.readlines()[-50:]
                        for line in reversed(lines):
                            if "Error Code: 279" in line or "ID = 17: Connection attempt failed" in line:
                                return "279"
            
            # Then check logcat for recent errors
            cmd = f"logcat -d | grep {package_name} | grep -E '(Error Code: 279|ID = 17: Connection attempt failed)' | tail -n 50"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if "Error Code: 279" in result.stdout or "ID = 17: Connection attempt failed" in result.stdout:
                return "279"
                
            return None
        except Exception as e:
            logger.error(f"Error checking log file for {package_name}: {e}")
            return None

    def is_package_running(self, package_name: str) -> tuple[bool, Optional[str]]:
        try:
            # First check for error code
            error_code = self.check_error_code(package_name)
            if error_code == "279":
                return False, "279"
            
            # Check process status
            cmd = "ps -A"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            processes = result.stdout.split('\n')
            
            # Look for processes that match our package but exclude grep
            roblox_processes = [
                proc for proc in processes
                if package_name in proc
                and not 'grep' in proc
                and len(proc.strip()) > 0
            ]
            
            if not roblox_processes:
                logger.info(f"No processes found for {package_name}")
                return False, None

            # Check if the package is in the active window stack
            cmd = "dumpsys activity activities | grep -A 3 'Running activities'"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            # If we can't check activities, assume it's running if process exists
            if result.returncode != 0:
                logger.info(f"Process check only: {package_name} is running")
                return True, None
                
            activities_output = result.stdout.strip()
            
            # Consider it running if either:
            # 1. Process exists and we see activity in the stack
            # 2. Process exists and activity check failed (fallback)
            is_running = bool(roblox_processes) and (package_name in activities_output or result.returncode != 0)
            return is_running, None
        except Exception as e:
            logger.error(f"Error checking package status: {e}")
            return False, None

    async def launch_roblox(self, package_name: str, server_link: str, error_code: Optional[str] = None):
        try:
            if error_code == "279":
                logger.info(f"Error 279 detected for {package_name}, waiting {Config.ERROR_279_RETRY_DELAY} seconds before relaunch...")
                await asyncio.sleep(Config.ERROR_279_RETRY_DELAY)
            
            subprocess.run(['logcat', '-c'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            subprocess.run([
                'am', 'start', '-n',
                f'{package_name}/com.roblox.client.startup.ActivitySplash',
                '-d', server_link
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            await asyncio.sleep(10)
            try:
                subprocess.run([
                    'am', 'start', '-n',
                    f'{package_name}/com.roblox.client.ActivityProtocolLaunch',
                    '-d', server_link
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                await asyncio.sleep(10)
            except Exception as e:
                logger.error(f"Failed to launch Roblox for {package_name}: {e}")
        except Exception as e:
            logger.error(f"Error launching protocol activity: {e}")  
    def find_userid_from_file(self, file_path):
        try:
            with open(file_path, 'r') as file:
                content = file.read()
                userid_start = content.find('"UserId":"')
                if userid_start == -1:
                    print(Fore.RED + "Không tìm thấy User ID." + Style.RESET_ALL)
                    return None
                userid_start += len('"UserId":"')
                userid_end = content.find('"', userid_start)
                if userid_end == -1:
                    print("Không tìm thấy kết thúc của User ID.")
                    return None
                userid = content[userid_start:userid_end]
                return userid
        except IOError as e:
            print(Fore.RED + f"Lỗi khi đọc file: {e}" + Style.RESET_ALL)
            return None
    async def send_discord_message(self, message):
        """Gửi thông báo Discord"""
        config = load_discord_config()
        webhook_url = config.get("WEBHOOK_URL")
        if webhook_url:
            await self.send_webhook_message(webhook_url, content=message)

    async def send_webhook_message(self, webhook_url, content=None, embeds=None):
        print(f"Đang gửi webhook đến: {webhook_url}")
        print(f"Nội dung: {content}")
        print(f"Embeds: {embeds}")
        
        async with aiohttp.ClientSession() as session:
            webhook_data = {}
            if content:
                webhook_data["content"] = content
            if embeds:
                webhook_data["embeds"] = embeds
            
            try:
                async with session.post(webhook_url, json=webhook_data) as response:
                    status = response.status
                    print(f"Kết quả gửi webhook: {status}")
                    if status == 204:
                        return True
                    else:
                        response_text = await response.text()
                        print(f"Lỗi webhook: {status} - {response_text}")
                    return False
            except Exception as e:
                logger.error(f"Lỗi gửi webhook: {e}")
                print(f"Exception khi gửi webhook: {e}")
                return False

    async def send_webhook_notification(self, message):
        """Gửi thông báo đơn giản qua webhook"""
        config = load_discord_config()
        webhook_url = config.get("WEBHOOK_URL")
        if webhook_url:
            await self.send_webhook_message(webhook_url, content=message)
    async def send_periodic_status_report(self):
        """Gửi báo cáo trạng thái định kỳ qua Discord Webhook"""
        config = load_discord_config()
        webhook_url = config.get("WEBHOOK_URL")
        if not webhook_url:
            return
        
        try:
            # Chuẩn bị embed cho báo cáo
            embed = {
                "title": "Báo cáo trạng thái định kỳ",
                "description": f"Thời gian: ```{datetime.now().strftime('%H:%M:%S - %d/%m/%Y')}```",
                "color": 3447003,  # Màu xanh
                "fields": []
            }

            # Thêm thông tin về các tài khoản
            account_status = []
            error_accounts = []
            offline_accounts = []
            
            for package_name, user_id in self._accounts:
                username = self.get_username(user_id) or user_id
                is_online, status_text = await self.verify_account_status(user_id, package_name)
                
                state = self.connection_states.get(user_id, {
                    "offline_count": 0,
                    "last_status": None,
                    "last_check_time": datetime.now(),
                    "error_code": None,
                    "retry_count": 0
                })

                _, error_code = self.is_package_running(package_name)
                status_emoji = "🟢" if is_online else "🔴"
                
                if not is_online:
                    offline_info = f"{username} - Offline {state['offline_count']}/15"
                    offline_accounts.append(offline_info)

                if error_code:
                    error_accounts.append(f"{username} - Lỗi {error_code}")

                account_status.append(f"{status_emoji} {username}: {status_text}")

            # Thêm các trường vào embed
            if account_status:
                embed["fields"].append({
                    "name": "Trạng thái tài khoản",
                    "value": "```\n" + "\n".join(account_status) + "\n```",
                    "inline": False
                })

            if offline_accounts:
                offline_message = '\n'.join('🔴 ' + acc for acc in offline_accounts)
                offline_message += "\n\n- API đã phát hiện Offline\n- Đang kết nối lại vui lòng đợi\n- Rejoin nếu 15/15"
                embed["fields"].append({
                    "name": "Trạng thái tài khoản Offline",
                    "value": f"```\n{offline_message}\n```",
                    "inline": False
                })

            if error_accounts:
                embed["fields"].append({
                    "name": "⚠️ Tài khoản có lỗi",
                    "value": "\n".join(error_accounts),
                    "inline": False
                })

            # Thêm thông tin cache
            cache_size = len(self._status_cache)
            current_cache_memory = sum(len(str(item)) for item in self._status_cache.items())
            
            def format_size(size_bytes):
                if size_bytes < 1024:
                    return f"{size_bytes}B"
                elif size_bytes < 1024 * 1024:
                    return f"{size_bytes/1024:.2f}KB"
                else:
                    return f"{size_bytes/(1024*1024):.2f}MB"

            cache_info = f"```- Kích thước cache hiện tại: {cache_size} mục ({format_size(current_cache_memory)})```"
            
            # Thêm thông tin về lần dọn dẹp gần nhất
            last_cleanup_stats = getattr(self, '_last_cleanup_stats', None)
            if last_cleanup_stats:
                time_since_cleanup = (datetime.now() - last_cleanup_stats["time"]).total_seconds() // 60
                items_removed = last_cleanup_stats["items_removed"]
                memory_freed = format_size(last_cleanup_stats["memory_freed"])
                
                cache_info += f"```\n- Lần xóa gần nhất ({time_since_cleanup} phút trước):"
                cache_info += f"\n- Đã xóa toàn bộ {items_removed} mục"
                cache_info += f"\n- Giải phóng {memory_freed}```"

            embed["fields"].append({
                "name": "Thông tin cache",
                "value": cache_info,
                "inline": False
            })

            # Gửi embed qua webhook
            await self.send_webhook_message(webhook_url, embeds=[embed])

        except Exception as e:
            logger.error(f"Lỗi khi gửi báo cáo webhook: {e}")
            print(f"{Fore.RED}[{datetime.now().strftime('%H:%M:%S')}] Lỗi khi gửi báo cáo webhook: {e}{Style.RESET_ALL}")

    async def _check_user_online_api(self, user_id: str) -> Optional[int]:
        max_retries = 3
        retry_delay = 2  # seconds
        
        for attempt in range(max_retries):
            try:
                url = "https://presence.roblox.com/v1/presence/users"
                headers = {
                    'Content-Type': 'application/json',
                    'User-Agent': 'Roblox/1.0'
                }
                body = json.dumps({"userIds": [int(user_id)]})
                
                async with aiohttp.ClientSession() as session:
                    try:
                        async with session.post(url, headers=headers, data=body, timeout=10) as response:
                            if response.status == 200:
                                data = await response.json()
                                if "userPresences" in data and data["userPresences"]:
                                    return data["userPresences"][0]["userPresenceType"]
                                else:
                                    logger.warning(f"API response for user {user_id} missing userPresences data: {data}")
                            elif response.status == 429:
                                logger.warning(f"Rate limit hit when checking user {user_id}. Retrying after delay.")
                                await asyncio.sleep(retry_delay * 2)  # Longer delay for rate limits
                                continue
                            else:
                                logger.error(f"API error for user {user_id}: Status {response.status}")
                                
                            # Nếu không thành công, thử lại sau delay
                            if attempt < max_retries - 1:
                                await asyncio.sleep(retry_delay)
                                continue
                    except aiohttp.ClientError as ce:
                                logger.error(f"Connection error when checking user {user_id}: {ce}")
                                if attempt < max_retries - 1:
                                    await asyncio.sleep(retry_delay)
                                    continue
                    except asyncio.TimeoutError:
                                logger.error(f"Timeout when checking user {user_id}")
                                if attempt < max_retries - 1:
                                    await asyncio.sleep(retry_delay)
                                    continue
                            
            except ValueError as ve:
                logger.error(f"Value error for user {user_id}: {ve}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    continue
                            
            except Exception as e:
                logger.error(f"Unexpected error checking online status for user {user_id}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    continue
    
        logger.warning(f"Failed to check online status for user {user_id} after {max_retries} attempts")
        return None
    async def check_users_online(self, user_ids: List[str]) -> Dict[str, Optional[int]]:
        """Kiểm tra trạng thái online của nhiều người dùng với cache."""
        current_time = datetime.now()
        results = {}
        uncached_ids = []
        
        # Kiểm tra cache trước
        for user_id in user_ids:
            if user_id in self._status_cache:
                last_status, last_check_time = self._status_cache[user_id]
                # Nếu kiểm tra gần đây (trong vòng 30 giây), sử dụng kết quả cache
                if (current_time - last_check_time).total_seconds() < 30:
                    results[user_id] = last_status
                    continue
            uncached_ids.append(user_id)
        
        # Nếu có ID cần kiểm tra mới, gọi API
        if uncached_ids:
            api_results = await self._check_multiple_users_online(uncached_ids)
            
            # Cập nhật cache và kết quả
            for user_id, status in api_results.items():
                if status is not None:
                    self._status_cache[user_id] = (status, current_time)
                results[user_id] = status
        
        return results
    
    async def check_user_online(self, user_id: str) -> Optional[int]:
        """Kiểm tra trạng thái online của một người dùng."""
        results = await self.check_users_online([user_id])
        return results.get(user_id)
    async def _check_multiple_users_online(self, user_ids: List[str]) -> Dict[str, Optional[int]]:
        """Kiểm tra trạng thái online của nhiều người dùng trong một lần gọi API."""
        if not user_ids:
            return {}
        
        max_retries = 3
        retry_delay = 2  # seconds
        results = {user_id: None for user_id in user_ids}
        
        # Giới hạn số lượng user_ids trong một request (Roblox API giới hạn 100 IDs mỗi request)
        batch_size = 100
        # Thêm timeout ngắn hơn để tránh treo
        timeout = aiohttp.ClientTimeout(total=10)
        for attempt in range(max_retries):
            try:
                # Xử lý theo batch để tránh vượt quá giới hạn API
                for i in range(0, len(user_ids), batch_size):
                    batch_ids = user_ids[i:i+batch_size]
                    
                    # Chuyển đổi string IDs sang integer IDs cho API
                    int_user_ids = [int(uid) for uid in batch_ids]
                    
                    url = "https://presence.roblox.com/v1/presence/users"
                    headers = {
                        'Content-Type': 'application/json',
                        'User-Agent': 'Roblox/1.0'
                    }
                    body = json.dumps({"userIds": int_user_ids})
                    
                    async with aiohttp.ClientSession(timeout=timeout) as session:
                        try:
                            async with session.post(url, headers=headers, data=body) as response:
                                if response.status == 200:
                                    data = await response.json()
                                    if "userPresences" in data:
                                        for presence in data["userPresences"]:
                                            user_id = str(presence["userId"])
                                            results[user_id] = presence["userPresenceType"]
                                    else:
                                        logger.warning(f"API response missing userPresences data: {data}")
                                elif response.status == 429:
                                    logger.warning(f"Rate limit hit when checking users. Retrying after delay.")
                                    await asyncio.sleep(retry_delay * 2)  # Longer delay for rate limits
                                    break  # Break inner loop to retry the whole batch
                                else:
                                    logger.error(f"API error: Status {response.status}")
                                    
                                    # Nếu không thành công, thử lại sau delay
                                    if attempt < max_retries - 1:
                                        await asyncio.sleep(retry_delay)
                                        break  # Break inner loop to retry the whole batch
                        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                            logger.error(f"Connection error when checking users: {e}")
                            if attempt < max_retries - 1:
                                await asyncio.sleep(retry_delay)
                                break  # Break inner loop to retry the whole batch
                            
                # Nếu đã xử lý tất cả các batch mà không gặp lỗi, thoát khỏi vòng lặp retry
                else:
                    break
                            
            except Exception as e:
                logger.error(f"Unexpected error checking online status for multiple users: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    continue
        
        # Log kết quả
        online_count = sum(1 for status in results.values() if status == 2)  # 2 = Online in Roblox API
        logger.info(f"Checked {len(user_ids)} users: {online_count} online, {len(user_ids) - online_count} offline/unknown")
        
        return results
    async def verify_status(self, user_id: str, package_name: str) -> bool:
    # Kiểm tra cả API và package status
        online_status = await self.check_user_online(user_id)
        package_running, _ = self.is_package_running(package_name)
        
        # Chỉ coi là offline nếu cả hai điều kiện đều false
        return not (online_status == 0 and not package_running)
    async def verify_account_status(self, user_id: str, package_name: str) -> tuple[bool, str]:
        try:
            # Kiểm tra trạng thái online từ API
            status = await self.check_user_online(user_id)
            # Kiểm tra package có đang chạy không
            package_running, error_code = self.is_package_running(package_name)
            
            # Xác định trạng thái
            if status is None:
                status_text = "API không phản hồi"
                return package_running, status_text
            elif status == 0 or not package_running:  # Nếu API trả về offline hoặc package không chạy
                status_text = "Offline"
                return False, status_text
            elif status == 1:
                status_text = "Trong sảnh"
            elif status == 2:
                status_text = "Đang chơi"
            elif status == 3:
                status_text = "Studio"
            else:
                status_text = "Không xác định"
            
            return True, status_text
        except Exception as e:
            logger.error(f"Lỗi khi kiểm tra trạng thái tài khoản {user_id}: {e}")
            return False, "Lỗi kiểm tra"

    async def run_menu(self):
        while True:
            try:
                print_header()
                menu = f"""
{Fore.CYAN}╔═══════════ MENU CHÍNH ═══════════╗
║                                  ║
║  {Fore.YELLOW}[1] Auto Rejoin Roblox Game{Fore.CYAN}     ║
║  {Fore.YELLOW}[2] Cài đặt Server/Game ID{Fore.CYAN}      ║
║  {Fore.YELLOW}[3] Xóa User ID & Server Link{Fore.CYAN}   ║
║  {Fore.YELLOW}[4] Xem Danh Sách{Fore.CYAN}               ║
║  {Fore.YELLOW}[5] Tự động cài User ID{Fore.CYAN}         ║
║  {Fore.YELLOW}[6] Chế độ Check và xóa cache{Fore.CYAN}   ║
║  {Fore.YELLOW}[7] Cài đặt Webhook    {Fore.CYAN}         ║
║  {Fore.YELLOW}[8] Đăng nhập bằng Cookie{Fore.CYAN}       ║
║  {Fore.YELLOW}[9] Lấy Cookie từ Package{Fore.CYAN}       ║
║  {Fore.RED}[0] Thoát{Fore.CYAN}                       ║
║                                  ║  
╚══════════════════════════════════╝{Style.RESET_ALL}
                """
                print(menu)
                # Sử dụng asyncio.run_in_executor để không chặn event loop
                loop = asyncio.get_event_loop()
                setup_type = await loop.run_in_executor(None, lambda: input(f"{Fore.CYAN}► Nhập lựa chọn của bạn (0-9): {Style.RESET_ALL}"))
                
                # Phần còn lại của code...
                # Đối với các input khác trong hàm này, cũng cần thay đổi tương tự
                if setup_type == "1":
                    self._accounts = self.load_accounts()
                    self._server_links = self.load_server_links()

                    if not self._accounts:
                        print(Fore.RED + "Không tìm thấy User ID, vui lòng thử lại sau." + Style.RESET_ALL)
                        continue
                    elif not self._server_links:
                        print(Fore.RED + "Không tìm thấy ID Game hoặc Liên kết Server Riêng, vui lòng thử lại sau." + Style.RESET_ALL)
                        continue

                    restart_time_input = input(Fore.CYAN + "Nhập thời gian khởi động lại tất cả Roblox game (tính bằng phút) hoặc nhấn q để bỏ qua: " + Style.RESET_ALL)
                    
                    restart_minutes = None
                    if restart_time_input.lower() != 'q':
                        try:
                            restart_minutes = int(restart_time_input)
                            if restart_minutes <= 0:
                                print(Fore.YELLOW + "Thời gian phải lớn hơn 0, đã bỏ qua tính năng khởi động lại tự động." + Style.RESET_ALL)
                                restart_minutes = None
                            else:
                                print(Fore.GREEN + f"Đã đặt thời gian khởi động lại: {restart_minutes} phút" + Style.RESET_ALL)
                        except ValueError:
                            print(Fore.YELLOW + "Giá trị không hợp lệ, đã bỏ qua tính năng khởi động lại tự động." + Style.RESET_ALL)
                            restart_minutes = None
                            
                    # Hiển thị danh sách package và cho phép người dùng chọn       
                    available_packages = [package for package, _ in self._accounts]
                    selected_packages = []

                    print(Fore.CYAN + "\nDanh sách package có sẵn:" + Style.RESET_ALL)
                    for i, package in enumerate(available_packages, 1):
                        print(f"{i}. {package}")

                    package_choice = input(Fore.YELLOW + "\nNhập số thứ tự các package muốn mở (cách nhau bởi dấu phẩy) hoặc nhấn q để mở tất cả: " + Style.RESET_ALL)
                    if package_choice.lower() == 'q':
                        # Mở tất cả package
                        selected_packages = available_packages
                        print(Fore.GREEN + "Đã chọn mở tất cả package." + Style.RESET_ALL)
                    else:
                        try:
                            # Xử lý input của người dùng
                            selected_indices = [int(idx.strip()) - 1 for idx in package_choice.split(',') if idx.strip()]
                            for idx in selected_indices:
                                if 0 <= idx < len(available_packages):
                                    selected_packages.append(available_packages[idx])
                            
                            if not selected_packages:
                                print(Fore.YELLOW + "Không có package nào được chọn, mở tất cả package." + Style.RESET_ALL)
                                selected_packages = available_packages
                            else:
                                print(Fore.GREEN + f"Đã chọn {len(selected_packages)} package: {', '.join(selected_packages)}" + Style.RESET_ALL)
                        except ValueError:
                            print(Fore.YELLOW + "Lựa chọn không hợp lệ, mở tất cả package." + Style.RESET_ALL)
                            selected_packages = available_packages
                    
                    # Lọc accounts và server_links theo package đã chọn
                    filtered_accounts = [(package, user_id) for package, user_id in self._accounts if package in selected_packages]
                    filtered_server_links = [(package, link) for package, link in self._server_links if package in selected_packages]
                    
                    # Cập nhật lại accounts và server_links cho phiên làm việc này
                    self._accounts = filtered_accounts
                    self._server_links = filtered_server_links

                    await self.start_auto_rejoin(restart_minutes)

                elif setup_type == "2":
                    packages = self.get_roblox_packages()
                    server_links = []
                    for package_name in packages:
                        print(Fore.YELLOW + f"Chọn game cho {package_name}:" + Style.RESET_ALL)
                        selected_game = get_game_selection()
                        formatted_link = format_server_link(selected_game) if selected_game else None
                        if formatted_link:
                            server_links.append((package_name, formatted_link))
                    self.save_server_links(server_links)

                elif setup_type == "3":
                    clear_choice = input(Fore.YELLOW + """╔════════ XÓA DỮ LIỆU ═════════╗
║ 1. Xóa User ID               ║
║ 2. Xóa Liên kết Server Riêng ║ 
║ 3. Xóa cả hai                ║
║ 4. Xóa Package Path          ║
║ 5. Xóa tất cả dữ liệu        ║
╚══════════════════════════════╝
►Nhập lựa chọn (1-5): """ + Style.RESET_ALL)

                    try:
                        if clear_choice == "1" and os.path.exists(Config.ACCOUNTS_FILE):
                            os.remove(Config.ACCOUNTS_FILE)
                            print(Fore.GREEN + "Đã xóa User ID." + Style.RESET_ALL)
                        elif clear_choice == "2" and os.path.exists(Config.SERVER_LINKS_FILE):
                            os.remove(Config.SERVER_LINKS_FILE)
                            print(Fore.GREEN + "Đã xóa Liên kết Server Riêng." + Style.RESET_ALL)
                        elif clear_choice == "3":
                            if os.path.exists(Config.ACCOUNTS_FILE):
                                os.remove(Config.ACCOUNTS_FILE)
                            if os.path.exists(Config.SERVER_LINKS_FILE):
                                os.remove(Config.SERVER_LINKS_FILE)
                            print(Fore.GREEN + "Đã xóa User ID và Liên kết Server Riêng." + Style.RESET_ALL)
                        elif clear_choice == "4" and os.path.exists(Config.PACKAGE_FILE):
                            os.remove(Config.PACKAGE_FILE)
                            print(Fore.GREEN + "Đã xóa Package Path." + Style.RESET_ALL)
                        elif clear_choice == "5":
                            if os.path.exists(Config.ACCOUNTS_FILE):
                                os.remove(Config.ACCOUNTS_FILE)
                            if os.path.exists(Config.SERVER_LINKS_FILE):
                                os.remove(Config.SERVER_LINKS_FILE)
                            if os.path.exists(Config.PACKAGE_FILE):
                                os.remove(Config.PACKAGE_FILE)
                            print(Fore.GREEN + "Đã xóa tất cả dữ liệu." + Style.RESET_ALL)
                    except Exception as e:
                        print(Fore.RED + f"Lỗi khi xóa file: {e}" + Style.RESET_ALL)

                elif setup_type == "4":
                    print_header()
                    print(Fore.CYAN + "\n╔═══════════ XEM DANH SÁCH TÀI KHOẢN ════════════╗" + Style.RESET_ALL)
                    print(Fore.CYAN + "║                                                ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "║  Hiển thị thông tin chi tiết về các tài khoản  ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "║  và liên kết server đã được cấu hình           ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "║                                                ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "╚════════════════════════════════════════════════╝\n" + Style.RESET_ALL)
                    
                    self._accounts = self.load_accounts()
                    self._server_links = self.load_server_links()
                    
                    if not self._accounts:
                        print(Fore.RED + "⚠️ Chưa có tài khoản nào được cấu hình!" + Style.RESET_ALL)
                        print(Fore.YELLOW + "Vui lòng sử dụng chức năng 5 để tự động cài đặt User ID." + Style.RESET_ALL)
                        input(Fore.CYAN + "\nNhấn Enter để quay lại menu chính..." + Style.RESET_ALL)
                        continue
                    
                    if not self._server_links:
                        print(Fore.RED + "⚠️ Chưa có liên kết server nào được cấu hình!" + Style.RESET_ALL)
                        print(Fore.YELLOW + "Vui lòng sử dụng chức năng 2 để cài đặt Server/Game ID." + Style.RESET_ALL)
                        input(Fore.CYAN + "\nNhấn Enter để quay lại menu chính..." + Style.RESET_ALL)
                        continue
                    
                    # Tạo bảng thông tin tài khoản
                    account_table = []
                    
                    print(Fore.YELLOW + "Đang lấy thông tin tài khoản..." + Style.RESET_ALL)
                    
                    for i, ((package_name, user_id), (_, server_link)) in enumerate(zip(self._accounts, self._server_links), 1):
                        username = self.get_username(user_id) or "Không xác định"
                        
                        # Xác định loại game từ server_link
                        game_type = "Không xác định"
                        if "16146832113" in server_link:
                            game_type = "Anime Vanguards"
                        elif "12886143095" in server_link:
                            game_type = "Anime Last Stand"
                        elif "8304191830" in server_link:
                            game_type = "Anime Adventures"
                        else:
                            # Trích xuất PlaceID nếu có
                            import re
                            place_id_match = re.search(r'placeID=(\d+)', server_link)
                            if place_id_match:
                                game_type = f"Game ID: {place_id_match.group(1)}"
                        
                        # Thêm vào bảng (đã loại bỏ cột user_id và trạng thái)
                        account_table.append([
                            i, 
                            username, 
                            package_name, 
                            game_type
                        ])
                    
                    # Hiển thị bảng thông tin (đã loại bỏ header user_id và trạng thái)
                    print("\n" + Fore.CYAN + "                        DANH SÁCH TÀI KHOẢN              " + Style.RESET_ALL)
                    print(tabulate(
                        account_table, 
                        headers=[
                            Fore.YELLOW + "STT" + Style.RESET_ALL, 
                            Fore.YELLOW + "Tên người dùng" + Style.RESET_ALL, 
                            Fore.YELLOW + "Package" + Style.RESET_ALL, 
                            Fore.YELLOW + "Game" + Style.RESET_ALL
                        ], 
                        tablefmt="fancy_grid"
                    ))
                    
                    # Hiển thị thông tin tổng quan
                    print(Fore.GREEN + f"\n✓ Tổng số tài khoản: {len(self._accounts)}" + Style.RESET_ALL)
                    print(Fore.GREEN + f"✓ Tổng số liên kết server: {len(self._server_links)}" + Style.RESET_ALL)
                    
                    # Hiển thị các tùy chọn bổ sung
                    print(Fore.CYAN + "\n╔═══════════ TÙY CHỌN BỔ SUNG ════════════╗" + Style.RESET_ALL)
                    print(Fore.CYAN + "║                                         ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "║  1. Kiểm tra trạng thái online          ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "║  2. Quay lại menu chính                 ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "║                                         ║" + Style.RESET_ALL)
                    print(Fore.CYAN + "╚═════════════════════════════════════════╝" + Style.RESET_ALL)
                    
                    option = input(Fore.CYAN + "\n► Nhập lựa chọn của bạn (1-2): " + Style.RESET_ALL)
                    
                    if option == "1":
                        print(Fore.YELLOW + "\nĐang kiểm tra trạng thái online của các tài khoản..." + Style.RESET_ALL)
                        
                        # Tạo bảng trạng thái
                        status_table = []
                        
                        # Thu thập tất cả user_ids cần kiểm tra
                        user_ids = [user_id for _, user_id in self._accounts]
                        
                        # Kiểm tra trạng thái online của tất cả người dùng trong một lần gọi API
                        online_statuses = await self.check_users_online(user_ids)
                        
                        for i, ((package_name, user_id), (_, server_link)) in enumerate(zip(self._accounts, self._server_links), 1):
                            username = self.get_username(user_id) or "Không xác định"
                            
                            # Lấy trạng thái online từ kết quả đã có
                            online_status = online_statuses.get(user_id)
                            
                            # Kiểm tra package có đang chạy không
                            package_running, error_code = self.is_package_running(package_name)
                            
                            # Xác định trạng thái
                            if online_status is None:
                                status_text = "API không phản hồi"
                                status_color = Fore.YELLOW
                            elif online_status == 0:
                                status_text = "Offline"
                                status_color = Fore.RED
                            elif online_status == 1:
                                status_text = "Trong sảnh"
                                status_color = Fore.BLUE
                            elif online_status == 2:
                                status_text = "Đang chơi"
                                status_color = Fore.GREEN
                            elif online_status == 3:
                                status_text = "Studio"
                                status_color = Fore.MAGENTA
                            else:
                                status_text = "Không xác định"
                                status_color = Fore.YELLOW
                            
                            # Trạng thái package
                            if error_code == "279":
                                package_status = "Lỗi 279"
                                package_color = Fore.RED
                            elif package_running:
                                package_status = "Đang chạy"
                                package_color = Fore.GREEN
                            else:
                                package_status = "Không chạy"
                                package_color = Fore.RED
                            
                            # Thêm vào bảng
                            status_table.append([
                                i,
                                username,
                                status_color + status_text + Style.RESET_ALL,
                                package_color + package_status + Style.RESET_ALL
                            ])
                        
                        # Hiển thị bảng trạng thái
                        print("\n" + Fore.CYAN + "╔═════════════ TRẠNG THÁI TÀI KHOẢN ═════════════╗" + Style.RESET_ALL)
                        print(tabulate(
                            status_table,
                            headers=[
                                Fore.YELLOW + "STT" + Style.RESET_ALL,
                                Fore.YELLOW + "Tên người dùng" + Style.RESET_ALL,
                                Fore.YELLOW + "Trạng thái API" + Style.RESET_ALL,
                                Fore.YELLOW + "Trạng thái Package" + Style.RESET_ALL
                            ],
                            tablefmt="fancy_grid"
                        ))
                        print(Fore.CYAN + "╚════════════════════════════════════════════════╝" + Style.RESET_ALL)
                    
                    input(Fore.CYAN + "\nNhấn Enter để quay lại menu chính..." + Style.RESET_ALL)


                elif setup_type == "5":
                    print(Fore.GREEN + "Tự động cài đặt User ID và Package..." + Style.RESET_ALL)
                    packages = self.get_roblox_packages()
                    accounts = []
                    package_paths = {}

                    for package_name in packages:
                        file_path = f'/data/data/{package_name}/files/appData/LocalStorage/appStorage.json'
                        package_paths[package_name] = file_path.replace('/appData/LocalStorage/appStorage.json', '')
                        user_id = self.find_userid_from_file(file_path)
                        if user_id:
                            accounts.append((package_name, user_id))
                            print(f"Tìm thấy User ID cho {package_name}: {user_id}")
                        else:
                            print(Fore.RED + f"Không tìm thấy User ID cho {package_name}. Vui lòng thử lại sau." + Style.RESET_ALL)

                    if accounts:
                        self.save_accounts(accounts)
                        self.save_package_paths(package_paths)
                        self._package_paths = package_paths
                        print(Fore.GREEN + "Đã lưu User ID và Package từ appStorage.json." + Style.RESET_ALL)

                        selected_game = get_game_selection()
                        formatted_link = format_server_link(selected_game) if selected_game else None
                        if formatted_link:
                            server_links = [(package_name, formatted_link) for package_name in packages]
                            self.save_server_links(server_links)
                            print(Fore.GREEN + "Đã lưu ID Game và Liên kết Server Riêng thành công!" + Style.RESET_ALL)

                elif setup_type == "0":
                    print(Fore.YELLOW + "Đang thoát..." + Style.RESET_ALL)
                    exit (0)

                elif setup_type == "6":
                    check_mode = input(Fore.CYAN + """╔═══ MODE KIỂM TRA VÀ CLEAR CACHE ═══╗
║                                    ║   
║ 1. Check Online                    ║
║    (kiểm tra trạng thái online)    ║
║ 2. Check Package                   ║
║    (kiểm tra package hoạt động)    ║
║ 3. Xóa Cache                       ║ 
║                                    ║  
╚════════════════════════════════════╝
►Nhập lựa chọn (1-3): """ + Style.RESET_ALL)

                    if check_mode == "1":
                        self._check_mode = "online"
                        print(Fore.GREEN + "Đã chọn chế độ Check Online" + Style.RESET_ALL)
                    elif check_mode == "2":
                        self._check_mode = "package"
                        print(Fore.GREEN + "Đã chọn chế độ Check Package" + Style.RESET_ALL)
                    elif check_mode == "3":
                        self._cleanup_cache()
                        print(Fore.GREEN + "Đã xóa toàn bộ cache" + Style.RESET_ALL)
                    else:
                        print(Fore.RED + "Lựa chọn không hợp lệ!" + Style.RESET_ALL)
                
                elif setup_type == "7":
                    print(Fore.CYAN + "===== Cài đặt Discord Webhook =====" + Style.RESET_ALL)
                    current_config = load_discord_config()
                    current_webhook = current_config.get("WEBHOOK_URL", "")
                    
                    masked_webhook = "••••••••" + current_webhook[-8:] if current_webhook else "Chưa cài đặt"
                    print(f"Webhook URL hiện tại: {masked_webhook}")
                    
                    new_webhook = input(Fore.YELLOW + "Nhập Webhook URL (để trống nếu giữ nguyên): " + Style.RESET_ALL)
                    if not new_webhook:
                        new_webhook = current_webhook
                    
                    save_discord_config(new_webhook)
                    print(Fore.GREEN + "Đã cập nhật Webhook URL!" + Style.RESET_ALL)
                elif setup_type == "8":
                    await self.auto_login_via_cookie()
                elif setup_type == "9":
                    await self.extract_cookies_from_packages()

                else:
                    print(Fore.RED + "Lựa chọn không hợp lệ!" + Style.RESET_ALL)
                await asyncio.sleep(2)
            except Exception as e:
                print(Fore.RED + f"Lỗi: {e}" + Style.RESET_ALL)
                logger.error(f"Error in menu: {e}")
                await asyncio.sleep(2)

    async def start_auto_rejoin(self, restart_minutes=None):
        print(Fore.YELLOW + "Đang tắt các trò chơi Roblox..." + Style.RESET_ALL)
        subprocess.run(['pkill', '-f', 'roblox'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        await asyncio.sleep(5)

        # Load package paths for package check mode
        self._package_paths = self.load_package_paths()
        if self._check_mode == "package" and not self._package_paths:
            print(Fore.RED + "Không tìm thấy thông tin package. Vui lòng sử dụng chức năng 5 để setup package." + Style.RESET_ALL)
            return
        
        # Initialize connection state tracking
        self.connection_states = {}
        for _, user_id in self._accounts:
            self.connection_states[user_id] = {
                "offline_count": 0,
                "last_status": None,
                "last_check_time": datetime.now(),
                "error_code": None,
                "retry_count": 0
            }

        # Launch initial instances
        print(Fore.CYAN + "Đang khởi động các phiên bản..." + Style.RESET_ALL)
        for package_name, server_link in self._server_links:
            await self.launch_roblox(package_name, server_link)
            await asyncio.sleep(2)  # Small delay between launches

        print(Fore.GREEN + "Đã khởi động tất cả các phiên bản. Bắt đầu theo dõi..." + Style.RESET_ALL)
        
        # Biến để theo dõi thời gian khởi động lại
        last_restart_time = datetime.now()
        # Biến đếm để làm sạch cache định kỳ
        check_counter = 0
        last_report_time = datetime.now()
        report_interval = 30  #  thời gian gửi báo cáo (giây)
        try:
            while True:
                current_time = datetime.now()
                time_str = current_time.strftime("%H:%M:%S")
                print(f"\n{Fore.CYAN}[{time_str}] Kiểm tra trạng thái...{Style.RESET_ALL}")

                # Tăng biến đếm và làm sạch cache nếu cần
                check_counter += 1
                if check_counter >= 10:
                    self._cleanup_cache()
                    check_counter = 0
                
                # Kiểm tra xem đã đến thời gian gửi báo cáo chưa
                if (current_time - last_report_time).total_seconds() >= report_interval:
                    try:
                        await self.send_periodic_status_report()
                        last_report_time = current_time
                        print(f"{Fore.GREEN}[{time_str}] Đã gửi báo cáo trạng thái định kỳ{Style.RESET_ALL}")
                    except Exception as e:
                        logger.error(f"Lỗi khi gửi báo cáo định kỳ: {e}")
                        print(f"{Fore.RED}[{time_str}] Lỗi khi gửi báo cáo định kỳ: {e}{Style.RESET_ALL}")
                # Kiểm tra xem có cần khởi động lại tất cả không
                if restart_minutes is not None:
                    elapsed_minutes = (current_time - last_restart_time).total_seconds() / 60
                    if elapsed_minutes >= restart_minutes:
                        print(f"{Fore.YELLOW}[{time_str}] Đã đến thời gian khởi động lại tất cả ({restart_minutes} phút){Style.RESET_ALL}")
                        
                        # Thông báo Discord nếu được cấu hình
                        try:
                            await self.send_discord_message(f"Đang khởi động lại tất cả các phiên bản Roblox theo lịch trình ({restart_minutes} phút)")
                        except Exception as e:
                            logger.error(f"Không thể gửi thông báo Discord: {e}")
                        
                        # Tắt tất cả các phiên bản Roblox
                        print(Fore.YELLOW + "Đang tắt tất cả các phiên bản Roblox..." + Style.RESET_ALL)
                        subprocess.run(['pkill', '-f', 'roblox'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                        await asyncio.sleep(5)
                        
                        # Khởi động lại tất cả các phiên bản
                        print(Fore.CYAN + "Đang khởi động lại tất cả các phiên bản..." + Style.RESET_ALL)
                        for package_name, server_link in self._server_links:
                            await self.launch_roblox(package_name, server_link)
                            await asyncio.sleep(2)
                        
                        # Cập nhật thời gian khởi động lại
                        last_restart_time = datetime.now()
                        print(Fore.GREEN + "Đã khởi động lại tất cả các phiên bản thành công!" + Style.RESET_ALL)
                        
                        # Reset trạng thái theo dõi
                        for _, user_id in self._accounts:
                            self.connection_states[user_id] = {
                                "offline_count": 0,
                                "last_status": None,
                                "last_check_time": datetime.now(),
                                "error_code": None,
                                "retry_count": 0
                            }
                
                # Prepare table data
                table_data = []
                headers = ["Tài khoản", "Trạng thái", "Package", "Lỗi"] if self._check_mode == "package" else ["Tài khoản", "Trạng thái", "Lỗi", "Kết nối"]

                # Hiển thị thời gian còn lại đến lần khởi động lại tiếp theo
                if restart_minutes is not None:
                    elapsed_minutes = (current_time - last_restart_time).total_seconds() / 60
                    remaining_minutes = max(0, restart_minutes - elapsed_minutes)
                    remaining_hours = int(remaining_minutes // 60)
                    remaining_mins = int(remaining_minutes % 60)
                    print(f"{Fore.CYAN}Thời gian đến lần khởi động lại tiếp theo: {remaining_hours}h {remaining_mins}m{Style.RESET_ALL}")

                # Thu thập tất cả user_ids cần kiểm tra
                user_ids = [user_id for _, user_id in self._accounts]
                # Kiểm tra trạng thái online của tất cả người dùng trong một lần gọi API
                online_statuses = await self.check_users_online(user_ids)

                # Bây giờ xử lý từng tài khoản với kết quả đã có
                for package_name, user_id in self._accounts:
                    username = self.get_username(user_id) or user_id
                    state = self.connection_states[user_id]
                    row = []
                    
                    # Lấy trạng thái online từ kết quả đã có
                    online_status = online_statuses.get(user_id)
                    
                    # Kiểm tra trạng thái package
                    package_running, error_code = self.is_package_running(package_name)
                    
                    if self._check_mode == "online":
                        # Xử lý dựa trên trạng thái online
                        if online_status == 0 or not package_running:
                            state["offline_count"] += 1
                            if state["offline_count"] >= self._offline_threshold:
                                row = [username, "Offline", f"{state['offline_count']} lần", "Lỗi"]
                                try:
                                    self.kill_specific_roblox_process(package_name)
                                    await asyncio.sleep(7)
                                    server_link = next((link for pkg, link in self._server_links if pkg == package_name), None)
                                    if server_link:
                                        # Thêm thông báo
                                        print(f"{Fore.YELLOW}Đang khởi động lại {package_name} cho {username}...{Style.RESET_ALL}")
                                        await self.launch_roblox(package_name, server_link)
                                        state["offline_count"] = 0  # Reset counter after restart
                                        # Thêm delay sau khi launch để hệ thống ổn định
                                        await asyncio.sleep(3)
                                except Exception as e:
                                    logger.error(f"Error during rejoin for {username}: {e}")            
                            else:
                                row = [username, "Kiểm tra", f"Offline {state['offline_count']}", "Kiểm tra"]
                        else:
                            # Xác định trạng thái từ online_status
                            status_text = "Không xác định"
                            if online_status == 1:
                                status_text = "Trong sảnh"
                            elif online_status == 2:
                                status_text = "Đang chơi"
                            elif online_status == 3:
                                status_text = "Studio"
                                
                            row = [username, status_text, "-", "Tốt"]
                            state["offline_count"] = 0  # Reset counter when online
                    else:
                        # Package check mode with error handling
                        if error_code == "279":
                            row = [username, "Lỗi 279", package_name, "Đợi 30s"]
                            self.kill_specific_roblox_process(package_name)
                            await asyncio.sleep(2)
                            server_link = next((link for pkg, link in self._server_links if pkg == package_name), None)
                            if server_link:
                                self.launch_roblox(package_name, server_link, error_code="279")
                                state["offline_count"] = 0
                        elif not package_running:
                            state["offline_count"] += 1
                            if state["offline_count"] >= 2:
                                state["retry_count"] += 1
                                state["last_check_time"] = datetime.now()
                                row = [username, "Không hoạt động", package_name, f"Retry {state['retry_count']}"]
                                self.kill_specific_roblox_process(package_name)
                                await asyncio.sleep(2)
                                server_link = next((link for pkg, link in self._server_links if pkg == package_name), None)
                                if server_link:
                                    await self.launch_roblox(package_name, server_link)
                                    state["offline_count"] = 0
                            else:
                                row = [username, f"Kiểm tra lần {state['offline_count']}", package_name, "-"]
                        else:
                            # Package đang chạy bình thường
                            if state["offline_count"] > 0:
                                row = [username, "Đã phục hồi", package_name, "-"]
                            else:
                                row = [username, "Hoạt động", package_name, "-"]
                            state["offline_count"] = 0  # Reset counter when running
                            state["retry_count"] = 0  # Reset số lần thử kết nối
                    table_data.append(row)
                    
                # Clear screen and print table
                os.system('cls' if os.name == 'nt' else 'clear')
                print_header()
                print(tabulate(table_data, headers=headers, tablefmt="grid"))
                    
                # Update last check time for all states
                for state in self.connection_states.values():
                    state["last_check_time"] = datetime.now()
                
                # Different check intervals for different modes
                await asyncio.sleep(30 if self._check_mode == "online" else 10)
        except KeyboardInterrupt:
            print(Fore.YELLOW + "\nĐang dừng auto rejoin..." + Style.RESET_ALL)
        except Exception as e:
            logger.error(f"Error in auto rejoin: {e}")
            print(Fore.RED + f"\nLỗi xảy ra: {e}" + Style.RESET_ALL)

async def main():
    try:
        # Hiển thị màn hình xác thực key trước
        license_valid = await show_license_screen()
        if not license_valid:
            print(Fore.RED + "Không thể xác thực key. Chương trình sẽ thoát." + Style.RESET_ALL)
            return
            
        # Nếu key hợp lệ, tiếp tục chạy chương trình
        manager = RobloxManager()
        await manager.run_menu()
    except Exception as e:
        print(Fore.RED + f"Lỗi: {e}" + Style.RESET_ALL)
        logger.error(f"Lỗi trong main: {e}")
    except KeyboardInterrupt:
        print(Fore.YELLOW + "Thoát..." + Style.RESET_ALL)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(Fore.YELLOW + "Thoát..." + Style.RESET_ALL)').decode())
